#pragma once

#include <ESP8266WebServer.h>


// ============= НАСТРОЙКИ =============
#define USE_OLD_APP_FROM_KOTEYKA                            // удалите эту строку, если вы используете более свежую версию приложения, чем та, что в архиве с прошивкой
//#define USE_IOS_APP                                       // раскомментируйте эту строку, если вы используете приложение для iOS "Arduino Lamp" https://apps.apple.com/ru/app/arduino-lamp/id1473000797

//#define USE_SHUFFLE_FAVORITES                             // раскомментируйте эту строку, если вам нужно, чтобы режим Цикл показал каждый эффект по 1 разу перед перемешиванием (иначе просто случйный эффект)
                                                            // кстати, если выбрано менее 2 эффектов, то демонстрироваться будут все эффекты по порядку без перемешивания
#define DONT_TURN_ON_AFTER_SHUTDOWN                         // удалите эту строку, если нужно, чтобы лампа возобновляла демонстрацию эффекта/эффектов после обесточивания
//#define AUTOMATIC_OFF_TIME    (5 * 60UL * 60UL * 1000UL)  // раскомментируйте эту строку, если нужно, чтобы лампа выключалась сама после 5 часов непрерывной работы (вдруг кто забыл перед отъездом выключить её). в приложении время будет отображаться некорректно!
#define USE_DEFAULT_SETTINGS_RESET                          // закомментируйте или удалите эту строку, если не нужно, чтобы при загрузке списка эффектов из лампы в приложение настройки эффектов сбрасывались на значения по умолчанию

// --- ESP -----------------------------
#define ESP_MODE              (1U)                          // 0U - WiFi точка доступа всегда, 1U - клиент WiFi (сперва тоже появится точка доступа, чтобы можно было настроить подключение к роутеру)
#define ESP_USE_BUTTON                                      // если строка не закомментирована, должна быть подключена кнопка (иначе ESP может регистрировать "фантомные" нажатия и некорректно устанавливать яркость)
#define ESP_CONF_TIMEOUT      (300U)                        // время в секундах, которое ESP будет ждать ввода SSID и пароля WiFi сети роутера в конфигурационном режиме, после его истечения ESP перезагружается
//#define GENERAL_DEBUG                                     // если строка не закомментирована, будут выводиться отладочные сообщения

#define LED_PIN               (2U)                          // пин ленты                (D4) - встроенный светодиод контроллера тоже на D4
#define BTN_PIN               (4U)                          // пин кнопки               (D2)
#define MOSFET_PIN            (5U)                          // пин MOSFET транзистора   (D1) - может быть использован для управления питанием матрицы/ленты
#define ALARM_PIN             (16U)                         // пин состояния будильника (D0) - может быть использован для управления каким-либо внешним устройством на время работы будильника
#define MOSFET_LEVEL          (HIGH)                        // логический уровень, в который будет установлен пин MOSFET_PIN, когда матрица включена - HIGH или LOW
#define ALARM_LEVEL           (HIGH)                        // логический уровень, в который будет установлен пин ALARM_PIN, когда "рассвет"/будильник включен

// --- ESP (WiFi клиент) ---------------
const uint8_t STA_STATIC_IP[] = {};                         // статический IP адрес: {} - IP адрес определяется роутером; {192, 168, 1, 66} - IP адрес задан явно (если DHCP на роутере не решит иначе); должен быть из того же диапазона адресов, что разадёт роутер
                                                            // SSID WiFi сети и пароль будут запрошены WiFi Manager'ом в режиме WiFi точки доступа, нет способа захардкодить их в прошивке
// --- AP (WiFi точка доступа) ---
#define AP_NAME               ("LedLamp")                   // имя WiFi точки доступа, используется как при запросе SSID и пароля WiFi сети роутера, так и при работе в режиме ESP_MODE = 0
#define AP_PASS               ("31415926")                  // пароль WiFi точки доступа
const uint8_t AP_STATIC_IP[] = {192, 168, 4, 1};            // статический IP точки доступа (лучше не менять!)

// --- ВРЕМЯ ---------------------------
#define USE_NTP                                             // закомментировать или удалить эту строку, если нужно, чтобы устройство не лезло в интернет
#define NTP_ADDRESS           ("ntp2.colocall.net")         // сервер времени
#define NTP_INTERVAL          (59 * 60UL * 1000UL)          // интервал синхронизации времени (59 минут)
//#define SUMMER_WINTER_TIME                                // для тех, кому нужен переход на зимнее/летнее время - оставить строку, остальным - закомментировать или удалить
#if !defined(SUMMER_WINTER_TIME)                            // ЕСЛИ НЕТ ПЕРЕХОДА НА ЛЕТНЕЕ ВРЕМЯ (см. строчку выше)
#define LOCAL_OFFSET          (3 * 60U)                     //   смещение локального времени относительно универсального координированного времени UTC в минутах
#else                                                       // ЕСЛИ ЕСТЬ ПЕРЕХОД НА ЛЕТНЕЕ ВРЕМЯ
#define SUMMER_OFFSET         (3 * 60U)                     //   смещение летнего времени относительно универсального координированного времени UTC в минутах
#define WINTER_OFFSET         (2 * 60U)                     //   смещение зимнего времени относительно универсального координированного времени UTC в минутах
#endif

// --- ВЫВОД ВРЕМЕНИ БЕГУЩЕЙ СТРОКОЙ ---
#define PRINT_TIME            (0U)                          // 0U - не выводить время бегущей строкой; 1U - вывод времени каждый час; 2U - каждый час + каждые 30 минут; 3U - каждый час + каждые 15 минут
                                                            // 4U - каждый час + каждые 10 минут; 5U - каждый час + каждые 5 минут; 6U - каждый час + каждую минуту
#define NIGHT_HOURS_START     (23 * 60U)                    // начало действия "ночного времени" (в минутах от начала суток, 23:00), текущее время бегущей строкой будет выводиться с яркостью NIGHT_HOURS_BRIGHTNESS
#define NIGHT_HOURS_STOP      (7 * 60U + 59)                // конец действия "ночного времени" (в минутах от начала суток, 7:59)
#define DAY_HOURS_BRIGHTNESS  (255)                         // яркость для вывода текущего времени бегущей строкой днём; если -1, будет использована яркость текущего эффекта (она известна, даже когда матрица выключена)
#define NIGHT_HOURS_BRIGHTNESS (5)                          // яркость для вывода текущего времени бегущей строкой ночью; если -1, будет использована яркость текущего эффекта (она известна, даже когда матрица выключена)
                                                            // константы DAY_HOURS_BRIGHTNESS и NIGHT_HOURS_BRIGHTNESS используются только, когда матрица выключена, иначе будет использована яркость текущего эффекта

// --- МАТРИЦА -------------------------
#define CURRENT_LIMIT         (2000U)                       // лимит по току в миллиамперах, автоматически управляет яркостью (пожалей свой блок питания!) 0 - выключить лимит

#define WIDTH                 (16U)                         // ширина матрицы
#define HEIGHT                (16U)                         // высота матрицы

#define COLOR_ORDER           (GRB)                         // порядок цветов на ленте. Если цвет отображается некорректно - меняйте. Начать можно с RGB

#define MATRIX_TYPE           (0U)                          // тип матрицы: 0 - зигзаг, 1 - параллельная
#define CONNECTION_ANGLE      (0U)                          // угол подключения: 0 - левый нижний, 1 - левый верхний, 2 - правый верхний, 3 - правый нижний
#define STRIP_DIRECTION       (0U)                          // направление ленты из угла: 0 - вправо, 1 - вверх, 2 - влево, 3 - вниз
                                                            // при неправильной настройке матрицы вы получите предупреждение "Wrong matrix parameters! Set to default"
                                                            // шпаргалка по настройке матрицы здесь! https://alexgyver.ru/matrix_guide/

// --- ЭФФЕКТЫ -------------------------
// == названия и номера эффектов ниже в списке используются на вкладке effectTricker ==
// == если меняете, меняйте и там, и ещё здесь ниже в РЕЕСТРЕ ДОСТУПНЫХ ЭФФЕКТОВ ==
#define EFF_WHITE_COLOR         ( 0U)    // Белый свет
#define EFF_COLOR               ( 1U)    // Цвет
#define EFF_COLORS              ( 2U)    // Смена цвета
#define EFF_MADNESS             ( 3U)    // Безумие
#define EFF_CLOUDS              ( 4U)    // Облака
#define EFF_LAVA                ( 5U)    // Лава
#define EFF_PLASMA              ( 6U)    // Плазма
#define EFF_RAINBOW             ( 7U)    // Радуга 3D
#define EFF_RAINBOW_STRIPE      ( 8U)    // Павлин
#define EFF_ZEBRA               ( 9U)    // Зебра
#define EFF_FOREST              (10U)    // Лес
#define EFF_OCEAN               (11U)    // Океан
#define EFF_BBALLS              (12U)    // Мячики
#define EFF_BBALLS_TRACES       (13U)    // Мячики со шлейфом
#define EFF_BALLS_BOUNCE        (14U)    // Мячики без границ
#define EFF_SPIRO               (15U)    // Спирали
#define EFF_PRISMATA            (16U)    // Призмата
#define EFF_FLOCK               (17U)    // Стая
#define EFF_FLOCK_N_PR          (18U)    // Стая и хищник
#define EFF_SINUSOID3           (19U)    // Синусоид
#define EFF_METABALLS           (20U)    // Метаболз


#define EFF_MATRIX              (21U)    // Матрица
#define EFF_FIRE_2012           (22U)    // Огонь 2012
#define EFF_FIRE_2018           (23U)    // Огонь 2018
#define EFF_FIRE                (24U)    // Огонь
#define EFF_FIRE_WHITTE         (25U)    // Белый огонь
#define EFF_FIRE_GREEN          (26U)    // Цветной огонь
#define EFF_WHIRL               (27U)    // Вихри пламени
#define EFF_WHIRL_MULTI         (28U)    // Разноцветные вихри
#define EFF_WATERFALL           (29U)    // Водопад
#define EFF_WATERFALL_WHITE     (30U)    // Белый водопад
#define EFF_WATERFALL_4IN1      (31U)    // Водопад 4 в 1
#define EFF_POOL                (32U)    // Бассейн
#define EFF_PULSE_SLOW          (33U)    // Медленный пульс
#define EFF_PULSE_FAST          (34U)    // Быстрый пульс
#define EFF_PULSE_RAINBOW       (35U)    // Радужный пульс
#define EFF_PULSE_WHITE         (36U)    // Белый пульс
#define EFF_COMET               (37U)    // Комета
#define EFF_COMET_WHITE         (38U)    // Белая комета
#define EFF_COMET_COLOR         (39U)    // Одноцветная комета
#define EFF_COMET_PULSING       (40U)    // Пульсирующая комета
#define EFF_COMET_TWO           (41U)    // Две кометы
#define EFF_COMET_THREE         (42U)    // Три кометы


#define EFF_FIREFLY             (43U)    // Парящий огонь
#define EFF_FIREFLY_TOP         (44U)    // Верховой огонь
#define EFF_SNAKE               (45U)    // Радужный змей
#define EFF_SPARKLES            (46U)    // Конфетти
#define EFF_TWINKLES            (47U)    // Мерцание
#define EFF_WAVES               (48U)    // Волны
#define EFF_RINGS               (49U)    // Кодовый замок
#define EFF_CUBE2D              (50U)    // Кубик Рубика
#define EFF_SIMPLE_RAIN         (51U)    // Тучка в банке
#define EFF_STORMY_RAIN         (52U)    // Гроза в банке
#define EFF_COLOR_RAIN          (53U)    // Осадки
#define EFF_RAIN                (54U)    // Разноцветный дождь
#define EFF_SNOW                (55U)    // Снегопад
#define EFF_SNOWSTORM           (56U)    // Метель
#define EFF_STARFALL            (57U)    // Звездопад
#define EFF_LIGHTERS            (58U)    // Светлячки
#define EFF_LIGHTER_TRACES      (59U)    // Светлячки со шлейфом
#define EFF_PAINTBALL           (60U)    // Пейнтбол
#define EFF_RAINBOW_VER         (61U)    // Радуга вертикальная
#define EFF_RAINBOW_HOR         (62U)    // Радуга горизонтальная
#define EFF_RAINBOW_DIAG        (63U)    // Радуга диагональная
#define EFF_CUBE                (64U)    // Блуждающий кубик
#define EFF_TEXT                (65U)    // Бегущая строка


#define MODE_AMOUNT           (66U)          // количество режимов

// ================ РЕЕСТР ДОСТУПНЫХ ЭФФЕКТОВ ===================
// ==== ДЛЯ ПЕРЕДАЧИ В ПРИЛОЖЕНИЯ С ПОДДЕРЖКОЙ ЭТОЙ ФУНКЦИИ =====
// формат записи:
//"Название эффекта,min_скорость,max_скорость,min_масштаб,max_масштаб,выбор_ли_цвета_это(0-нет,1-да 2-совмещённый);"
// Порядок эффектов можно менять на своё усмотрение, не забывая при этом менять им номера в списке ВЫШЕ
// Можно добавлять новые или удалять ненужные эффекты сохраняя количество эффектов в каждой строке примерно одинаковым,
// т.е. общее количество эффектов делим примерно пропорционально на три строки. Когда перестанет влезать - приложение начнёт глючить.
// Не забывайте подключать добавленные эффекты в файле effectTicker.ino
// Список эффектов из лампы (этот реестр) передаётся частями из 3-х строк.
// ОЧЕНЬ ВАЖНО!!! Следите за знаками при редавктировании эффектов. Не допускайте пробелов, кроме как в названии эффекта.
// В кавычках Имя эффекта и его параметры должны быть разделены запятой, а на конце точка с запятой.
const String efList_1 = String("LIST1;") + // ======== ПЕРВАЯ СТРОКА ========
String("0. Белый свет,1,255,1,100,0;") +
String("1. Цвет,1,255,1,100,1;") +
String("2. Смена цвета,1,255,1,255,0;") +
String("3. Безумие,1,150,1,100,0;") +
String("4. Облака,1,15,1,50,0;") +
String("5. Лава,5,60,1,100,0;") +
String("6. Плазма,1,30,1,100,0;") +
String("7. Радуга 3D,1,70,1,100,0;") +
String("8. Павлин,1,15,1,30,0;") +
String("9. Зебра,1,30,7,40,0;") +
String("10. Лес,2,30,70,100,0;") +
String("11. Океан,2,15,4,30,0;") +
String("12. Мячики,1,255,1,100,0;") +
String("13. Мячики со шлейфом,1,255,1,100,0;") +
String("14. Мячики без границ,1,255,1,100,0;") +
String("15. Спирали,1,255,1,100,0;") +
String("16. Призмата,1,255,1,100,0;") +
String("17. Стая,1,255,1,100,0;") +
String("18. Стая и хищник,1,255,1,100,0;") +
String("19. Синусоид,1,255,1,100,0;") +
String("20. Метаболз,1,255,1,100,0;") +
String(+ "\n");
const String efList_2 = String("LIST2;") + // ======== ВТОРАЯ СТРОКА ========
String("21. Матрица,100,240,1,100,0;") +
String("22. Огонь 2012,50,252,1,100,0;") +
String("23. Огонь 2018,50,252,1,100,0;") +
String("24. Огонь,50,252,1,100,1;") +
String("25. Белый огонь,50,252,1,100,1;") +
String("26. Цветной огонь,50,252,1,100,1;") +
String("27. Вихри пламени,100,252,1,100,1;") +
String("28. Разноцветные вихри,100,252,1,100,0;") +
String("29. Водопад,50,252,1,100,1;") +
String("30. Белый водопад,50,252,1,100,1;") +
String("31. Водопад 4 в 1,50,252,1,100,0;") +
String("32. Бассейн,100,252,1,100,1;") +
String("33. Медленный пульс,50,252,1,100,0;") +
String("34. Быстрый пульс,50,252,1,100,0;") +
String("35. Радужный пульс,50,252,1,100,0;") +
String("36. Белый пульс,50,252,1,100,0;") +
String("37. Комета,60,252,1,100,0;") +
String("38. Белая комета,60,252,1,100,0;") +
String("39. Одноцветная комета,60,252,1,100,1;") +
String("40. Пульсирующая комета,60,252,1,100,0;") +
String("41. Две кометы,60,252,1,100,0;") +
String("42. Три кометы,60,252,1,100,0;") +
String(+ "\n");
const String efList_3 = String("LIST3;") + // ======== ТРЕТЬЯ СТРОКА ========
String("43. Парящий огонь,60,252,1,100,0;") +
String("44. Верховой огонь,60,252,1,100,0;") +
String("45. Радужный змей,60,252,100,100,0;") +
String("46. Конфетти,60,252,1,100,0;") +
String("47. Мерцание,60,252,1,100,0;") +
String("48. Волны,220,252,1,100,0;") +
String("49. Кодовый замок,50,252,1,100,0;") +
String("50. Кубик Рубика,50,252,1,100,0;") +
String("51. Тучка в банке,60,252,1,100,0;") +
String("52. Гроза в банке,60,252,1,100,0;") +
String("53. Осадки,60,252,0,255,1;") +
String("54. Разноцветный дождь,60,252,1,100,1;") +
String("55. Снегопад,50,252,1,100,0;") +
String("56. Метель,50,252,1,100,0;") +
String("57. Звездопад,50,252,1,100,0;") +
String("58. Светлячки,50,252,1,100,0;") +
String("59. Светлячки со шлейфом,50,252,1,100,0;") +
String("60. Пейнтбол,215,252,1,100,0;") +
String("61. Радуга вертикальная,50,252,1,100,0;") +
String("62. Радуга горизонтальная,50,252,1,100,0;") +
String("63. Радуга диагональная,50,252,1,100,0;") +
String("64. Блуждающий кубик,70,252,1,100,0;") +
String("65. Бегущая строка,1,252,1,100,1;") +
// ЭФФЕКТ БЕГУЩАЯ СТРОКА ДОЛЖЕН БЫТЬ ПОСЛЕДНИМ ВСЕГДА!!!
String(+ "\n");

// ============= КОНЕЦ РЕЕСТРА =====

// ============= МАССИВ НАСТРОЕК ЭФФЕКТОВ ПО УМОЛЧАНИЮ ===================
// формат записи:
//{ Яркость, Скорость, Масштаб},
static const uint8_t defaultSettings[][3] PROGMEM = {
  {   9, 207,  26}, // Белый свет
  {  10,  20,  45}, // Цвет
  {  10, 252,  32}, // Смена цвета
  {  11,  33,  58}, // Безумие
  {   8,   4,  34}, // Облака
  {   8,   9,  24}, // Лава
  {  11,  19,  59}, // Плазма
  {  11,  13,  60}, // Радуга 3D
  {  11,   5,  12}, // Павлин
  {   7,   8,  21}, // Зебра
  {   7,   3,  95}, // Лес
  {   7,   6,  12}, // Океан
  {  24, 255,  60}, // Мячики
  {  18,  13,  60}, // Мячики со шлейфом
  {  18,   9,   7}, // Мячики без границ
  {   9,  46,   3}, // Спирали
  {  17, 100,   2}, // Призмата
  {  15, 136,   1}, // Стая
  {  15, 128,   1}, // Стая и хищник
  {   7, 175,  30}, // Синусоид
  {   7,  85,  85}, // Метаболз


  {  27, 186,  23}, // Матрица
  {   7, 220,  63}, // Огонь 2012
  {  50, 220,  15}, // Огонь 2018
  {  19, 220,   1}, // Огонь
  {   7, 180, 100}, // Белый огонь
  {  13, 185,  36}, // Цветной огонь
  {   9, 240,   1}, // Вихри пламени
  {   9, 240,   1}, // Разноцветные вихри
  {   7, 188,  63}, // Водопад
  {   5, 176, 100}, // Белый водопад
  {   7, 183,  85}, // Водопад 4 в 1
  {   8, 222,  63}, // Бассейн
  {  12, 185,   6}, // Медленный пульс
  {  11, 185,  81}, // Быстрый пульс
  {  11, 185,  31}, // Радужный пульс
  {   9, 179,  11}, // Белый пульс
  {  16, 220,  28}, // Комета
  {  12, 208, 100}, // Белая комета
  {  14, 212,  69}, // Одноцветная комета
  {  14, 209,   1}, // Пульсирующая комета
  {  27, 186,  19}, // Две кометы
  {  24, 186,   9}, // Три кометы


  {  26, 206,  15}, // Парящий огонь
  {  26, 190,  15}, // Верховой огонь
  {  12, 178, 100}, // Радужный змей
  {  16, 142,  63}, // Конфетти
  {  25, 236,   4}, // Мерцание
  {   9, 236,  85}, // Волны
  {  10, 220,  92}, // Кодовый замок
  {   9, 221,  67}, // Кубик Рубика
  {  30, 240,   2}, // Тучка в банке
  {  15, 236,  25}, // Гроза в банке
  {  15, 225, 163}, // Осадки
  {  15, 225,   1}, // Разноцветный дождь
  {   9, 180,  90}, // Снегопад
  {  15, 193,  54}, // Метель
  {  60, 199,  54}, // Звездопад
  {  15, 157,  23}, // Светлячки
  {  21, 198,  93}, // Светлячки со шлейфом
  {  11, 236,   7}, // Пейнтбол
  {   8, 196,  18}, // Радуга вертикальная
  {   8, 196,  23}, // Радуга горизонтальная
  {   8, 180,  24}, // Радуга диагональная
  {   7, 160,  69}, // Блуждающий кубик
  {  10,  99,  38} // Бегущая строка
}; //             ^-- проверьте, чтобы у предыдущей строки не было запятой после скобки

#define ARRAY_ROWS(ARRAY) (sizeof(ARRAY) / sizeof(ARRAY[0]))            // здесь создаётся проверка, чтобы из-за неверного количества строк лампа не вырубалась.
const uint8_t defaultSettingsCOUNT = ARRAY_ROWS(defaultSettings);       // если вы ошибётесь, то настройки будут сбрасываться на {  50, 225,  40} для всех эффектов!

// ============= КОНЕЦ МАССИВА =====



// === ОСТАЛЬНОЕ ДЛЯ РАЗРАБОТЧИКОВ =====

// --- МАТРИЦА -------------------------
#define BRIGHTNESS            (40U)                         // стандартная маскимальная яркость (0-255) вряд ли параметр вообще нужен

#if defined (ESP_USE_BUTTON)
#define BUTTON_STEP_TIMEOUT   (100U)                        // каждые BUTTON_STEP_TIMEOUT мс будет генерироваться событие удержания кнопки (для регулировки яркости)
#define BUTTON_CLICK_TIMEOUT  (500U)                        // максимальное время между нажатиями кнопки в мс, до достижения которого считается серия последовательных нажатий
#endif
uint8_t espMode = ESP_MODE;                                 // ESP_MODE может быть сохранён в энергонезависимую память и изменён в процессе работы лампы без необходимости её перепрошивки
#define ESP_RESET_ON_START    (false)                       // true - если при старте нажата кнопка (или кнопки нет!), сохранённые настройки будут сброшены; false - не будут
#define ESP_HTTP_PORT         (80U)                         // номер порта, который будет использоваться во время первой утановки имени WiFi сети (и пароля), к которой потом будет подключаться лампа в режиме WiFi клиента (лучше не менять)
#define ESP_UDP_PORT          (8888U)                       // номер порта, который будет "слушать" UDP сервер во время работы лампы как в режиме WiFi точки доступа, так и в режиме WiFi клиента (лучше не менять)
#define ESP_CONN_TIMEOUT      (7U)                          // время в секундах (ДОЛЖНО БЫТЬ МЕНЬШЕ 8, иначе сработает WDT), которое ESP будет пытаться подключиться к WiFi сети, после его истечения автоматически развернёт WiFi точку доступа

#define WIFIMAN_DEBUG         (true)                        // вывод отладочных сообщений при подключении к WiFi сети: true - выводятся, false - не выводятся; настройка не зависит от GENERAL_DEBUG
#define OTA                                                 // если строка не закомментирована, модуль будет ждать два последдовательных запроса пользователя на прошивку по воздуху (см. документацию в "шапке")
#ifdef OTA
#define ESP_OTA_PORT          (8266U)                       // номер порта, который будет "прослушиваться" в ожидании команды прошивки по воздуху
#endif

#if !defined(SUMMER_WINTER_TIME)
#define LOCAL_WEEK_NUM        (week_t::Last)                // для стран, где нет перехода на зимнее/летнее время это технический параметр, не нужно его изменять
#define LOCAL_WEEKDAY         (dow_t::Sun)                  // для стран, где нет перехода на зимнее/летнее время это технический параметр, не нужно его изменять
#define LOCAL_MONTH           (month_t::Mar)                // для стран, где нет перехода на зимнее/летнее время это технический параметр, не нужно его изменять
#define LOCAL_HOUR            (1U)                          // для стран, где нет перехода на зимнее/летнее время это технический параметр, не нужно его изменять
#define LOCAL_TIMEZONE_NAME   ("")                       //* было "MSK" обозначение локального часового пояса; до 5 символов; может быть использовано, если понадобится его вывести после вывода времени
#else
#define SUMMER_HOUR           (3U)                          // час (по зимнему времени!), когда заканчивается зимнее время и начинается летнее; [0..23]
#define SUMMER_WEEK_NUM       (week_t::Last)                // номер недели в месяце, когда происходит переход на летнее время (возможные варианты: First - первая, Second - вторая, Third - третья, Fourth - четвёртая, Last - последняя)
#define SUMMER_WEEKDAY        (dow_t::Sun)                  // день недели, когда происходит переход на летнее время (возможные варианты: Mon - пн, Tue - вт, Wed - ср, Thu - чт, Sat - сб, Sun - вс)
#define SUMMER_MONTH          (month_t::Mar)                // месяц, в котором происходит переход на летнее время (возможные варианты: Jan - январь, Feb - февраль, Mar - март, Apr - апрель, May - май, Jun - июнь, Jul - июль, Aug - август, Sep - сентябрь, Oct - октябрь, Nov - ноябрь, Dec - декабрь)
#define SUMMER_TIMEZONE_NAME  ("EEST")                      // обозначение летнего времени; до 5 символов; может быть использовано, если понадобится его вывести после вывода времени; может быть "ЛЕТ"
#define WINTER_HOUR           (4U)                          // час (по летнему времени!), когда заканчивается летнее время и начинается зимнее; [0..23]
#define WINTER_WEEK_NUM       (week_t::Last)                // номер недели в месяце, когда происходит переход на зимнее время (возможные варианты: First - первая, Second - вторая, Third - третья, Fourth - четвёртая, Last - последняя)
#define WINTER_WEEKDAY        (dow_t::Sun)                  // день недели, когда происходит переход на зимнее время (возможные варианты: Mon - пн, Tue - вт, Wed - ср, Thu - чт, Sat - сб, Sun - вс)
#define WINTER_MONTH          (month_t::Oct)                // месяц, в котором происходит переход на зимнее время (возможные варианты: Jan - январь, Feb - февраль, Mar - март, Apr - апрель, May - май, Jun - июнь, Jul - июль, Aug - август, Sep - сентябрь, Oct - октябрь, Nov - ноябрь, Dec - декабрь)
#define WINTER_TIMEZONE_NAME  ("EET")                       // обозначение зимнего времени; до 5 символов; может быть использовано, если понадобится его вывести после вывода времени; может быть "ЗИМ"
#endif

// --- ВНЕШНЕЕ УПРАВЛЕНИЕ --------------
#define USE_MQTT              (false)                       // true - используется mqtt клиент, false - нет
#if USE_MQTT
#define MQTT_RECONNECT_TIME   (10U)                         // время в секундах перед подключением к MQTT брокеру в случае потери подключения
#endif

// --- РАССВЕТ -------------------------
#define DAWN_BRIGHT           (200U)                        // максимальная яркость рассвета (0-255)
#define DAWN_TIMEOUT          (1U)                          // сколько рассвет светит после времени будильника, минут


//#define MAX_UDP_BUFFER_SIZE (UDP_TX_PACKET_MAX_SIZE + 1)
// максимальный размер буффера UDP сервера 
// 255 - это максимальное значение, при котором работа с Избранным не будет глючить
// для исходящих сообщений в приложение данное ограничение можно обойти (см. как реализована отправка "LIST"),
// а для входящего списка избранного - хз. пришлось увеличить до максимально возможножного значения. 
// дальше придётся переделывать типы (размеры) переменных в функциях FavoritesManager.h
#define MAX_UDP_BUFFER_SIZE   (255U)                        // максимальный размер буффера UDP сервера

#define GENERAL_DEBUG_TELNET  (false)                       // true - отладочные сообщения будут выводиться в telnet вместо Serial порта (для удалённой отладки без подключения usb кабелем)
#define TELNET_PORT           (23U)                         // номер telnet порта

#if defined(GENERAL_DEBUG) && GENERAL_DEBUG_TELNET
WiFiServer telnetServer(TELNET_PORT);                       // telnet сервер
WiFiClient telnet;                                          // обработчик событий telnet клиента
bool telnetGreetingShown = false;                           // признак "показано приветствие в telnet"
#define LOG                   telnet
#else
#define LOG                   Serial
#endif

// --- БИБЛИОТЕКИ ----------------------
#define FASTLED_INTERRUPT_RETRY_COUNT   (0)                 // default: 2; // Use this to determine how many times FastLED will attempt to re-transmit a frame if interrupted for too long by interrupts
//#define FASTLED_ALLOW_INTERRUPTS      (1)                 // default: 1; // Use this to force FastLED to allow interrupts in the clockless chipsets (or to force it to disallow), overriding the default on platforms that support this. Set the value to 1 to allow interrupts or 0 to disallow them.
#define FASTLED_ESP8266_RAW_PIN_ORDER                       // FASTLED_ESP8266_RAW_PIN_ORDER, FASTLED_ESP8266_D1_PIN_ORDER or FASTLED_ESP8266_NODEMCU_PIN_ORDER

#define NUM_LEDS              (uint16_t)(WIDTH * HEIGHT)
#define SEGMENTS              (1U)                          // диодов в одном "пикселе" (для создания матрицы из кусков ленты). вряд ли эффекты будут корректно работать, если изменить этот параметр
